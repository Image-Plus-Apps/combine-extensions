import XCTest
import Combine
@testable import CombineUnpack

%{
from environs import Env
env = Env()
env.read_env()
max_arguments = int(env("MAX_ARGUMENTS"))
}%


final class CombineLatestUnpackTests: XCTestCase {
    
    var cancellables: Set<AnyCancellable>!
    
    override func setUpWithError() throws {
        try super.setUpWithError()
        cancellables = Set()
    }
    
    override func tearDownWithError() throws {
        try super.tearDownWithError()
        cancellables = nil
    }
    
% for test_argument_count in range(3, max_arguments + 1):
    func testUnpack${str(test_argument_count)}() {
        class Unpack {
            % for value in range(0, test_argument_count):
            @Published var value${str(value + 1)}: Int = ${value}
            %end
        }
        
        let expectation = XCTestExpectation()
        
        let unpack = Unpack()
        unpack.$value1
            % for value in range(1, test_argument_count):
            .combineLatest(unpack.$value${str(value + 1)})
            %end
            .unpack()
            .map { (${", ".join(map(lambda x: "value" + str(x + 1) + ": Int", range(0, test_argument_count)))}) -> Int in
                ${" + ".join(map(lambda x: "value" + str(x + 1), range(0, test_argument_count)))}
            }
            .sink {
                XCTAssertEqual(${sum(range(0, test_argument_count))}, $0)
                expectation.fulfill()
            }
            .store(in: &cancellables)
            
        wait(for: [expectation], timeout: 60)
    }

%end

}
